{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyPYQPeb0RRWV6Vsxwq9jIUA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Начало работы с OR-инструментами для Python"],"metadata":{"id":"ItdCxcNj8Mqm"}},{"cell_type":"markdown","source":["# Что такое проблема оптимизации?"],"metadata":{"id":"be_kuLIlwg0w"}},{"cell_type":"markdown","source":["Цель оптимизации — найти **лучшее** решение проблемы из большого множества возможных решений. (Иногда вам будет достаточно найти любое осуществимое решение; OR-Tools тоже может это сделать.)\n","\n","Вот типичная задача оптимизации.\n","\n","Предположим, что транспортная компания доставляет посылки своим клиентам с помощью парка грузовиков. Каждый день компания должна распределять посылки по грузовикам, а затем выбирать маршрут для каждого грузовика для доставки своих посылок. Стоимость каждого возможного назначения пакетов и маршрутов зависит от общего расстояния поездки грузовиков и, возможно, от других факторов.\n","\n","Проблема состоит в том, чтобы выбрать назначения пакетов и маршрутов с наименьшей стоимостью."],"metadata":{"id":"vZ3uD_Nownzz"}},{"cell_type":"markdown","source":["https://developers.google.com/optimization/introduction/python?hl=ru"],"metadata":{"id":"ZGReMHhb8Pbg"}},{"cell_type":"markdown","source":["Задачи оптимизации имеет следующие элементы:\n","\n","* **Цель** — количество, которое вы хотите оптимизировать. В приведенном выше примере целью является минимизация затрат. Чтобы поставить задачу оптимизации, вам необходимо определить функцию, которая вычисляет значение цели для любого возможного решения. Это называется целевой функцией . В предыдущем примере целевая функция рассчитает общую стоимость любого назначения пакетов и маршрутов.\n","\n","* **Оптимальное** решение — это решение, для которого значение целевой функции является наилучшим. («Лучшее» может быть либо максимальным, либо минимальным.)\n","\n","* **Ограничения** — ограничения на множество возможных решений, основанные на конкретных требованиях задачи. Например, если транспортная компания не может назначить грузовым автомобилям посылки, вес которых превышает заданный, это наложит ограничения на решения.\n","\n","* **Допустимое решение** — это решение, которое удовлетворяет всем заданным\n","ограничениям задачи, но не обязательно является оптимальным."],"metadata":{"id":"oDdVuXnC8TMA"}},{"cell_type":"markdown","source":["## Примеры OR-инструментов\n","\n","Решение задачи оптимизации на Python\n","\n","https://developers.google.com/optimization/examples?hl=ru"],"metadata":{"id":"0_fzv76CDD4h"}},{"cell_type":"markdown","source":["## Пример линейной оптимизации\n","\n","**Максимизируйте 3x + y при следующих ограничениях:**\n","\n","- 0 ≤ x ≤ 1\n","- 0 ≤ y ≤ 2\n","- x + y ≤ 2\n","\n","Целевая функция в этом примере — 3x + y .\n","\n","И целевая функция, и ограничения задаются линейными выражениями, что делает эту задачу линейной."],"metadata":{"id":"pvuRiApDZuhY"}},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l_JL3Vq5Xfth","executionInfo":{"status":"ok","timestamp":1736932153558,"user_tz":-300,"elapsed":3444,"user":{"displayName":"Александр Шипулин","userId":"03519847593250349314"}},"outputId":"3c28c34b-1e0d-431a-dc62-72ce5c6ddd1d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: ortools in /usr/local/lib/python3.10/dist-packages (9.11.4210)\n","Requirement already satisfied: absl-py>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ortools) (2.1.0)\n","Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.10/dist-packages (from ortools) (1.26.4)\n","Requirement already satisfied: pandas>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ortools) (2.2.2)\n","Requirement already satisfied: protobuf<5.27,>=5.26.1 in /usr/local/lib/python3.10/dist-packages (from ortools) (5.26.1)\n","Requirement already satisfied: immutabledict>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from ortools) (4.2.1)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=2.0.0->ortools) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=2.0.0->ortools) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=2.0.0->ortools) (2024.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas>=2.0.0->ortools) (1.17.0)\n"]}],"source":["# Установим\n","# https://pypi.org/project/ortools/\n","%pip install ortools"]},{"cell_type":"code","source":["# Импортируйте необходимые библиотеки\n","from ortools.init.python import init\n","from ortools.linear_solver import pywraplp"],"metadata":{"id":"dF_c7aFoYfar","executionInfo":{"status":"ok","timestamp":1736932153558,"user_tz":-300,"elapsed":7,"user":{"displayName":"Александр Шипулин","userId":"03519847593250349314"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["# Создайте линейный решатель с помощью серверной части GLOP.\n","# Объявите решатель.\n","solver = pywraplp.Solver.CreateSolver(\"GLOP\")\n","if not solver:\n","    print(\"ОШИБКа. Не удалось создать решатель\")"],"metadata":{"id":"JLTdr3VkZIfJ","executionInfo":{"status":"ok","timestamp":1736932153558,"user_tz":-300,"elapsed":7,"user":{"displayName":"Александр Шипулин","userId":"03519847593250349314"}}},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":["pywraplp — это оболочка Python для базового решателя C++. Аргумент \"GLOP\" указывает GLOP , линейный решатель OR-Tools."],"metadata":{"id":"P1mpx296ZTAf"}},{"cell_type":"code","source":["# Create the variables x and y.\n","# Создайте переменные.\n","x_var = solver.NumVar(0, 1, \"x\")\n","y_var = solver.NumVar(0, 2, \"y\")\n","\n","print(\"Количество переменных =\", solver.NumVariables())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jz8KpsyrZWnI","executionInfo":{"status":"ok","timestamp":1736932153558,"user_tz":-300,"elapsed":6,"user":{"displayName":"Александр Шипулин","userId":"03519847593250349314"}},"outputId":"cb0a07dc-506c-4a0c-def7-e710d7b55eb7"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Количество переменных = 2\n"]}]},{"cell_type":"markdown","source":["Определите ограничения. Первые два ограничения, 0 ≤ x ≤ 1 и 0 ≤ y ≤ 2 , уже установлены определениями переменных. Следующий код определяет ограничение x + y ≤ 2 :"],"metadata":{"id":"86MKoEnhZgC4"}},{"cell_type":"code","source":["infinity = solver.infinity()\n","# Create a linear constraint, x + y <= 2.\n","constraint = solver.Constraint(-infinity, 2, \"ct\")\n","constraint.SetCoefficient(x_var, 1)\n","constraint.SetCoefficient(y_var, 1)\n","\n","print(\"Количество переменных =\", solver.NumConstraints())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LOBg10TYZhtY","executionInfo":{"status":"ok","timestamp":1736932153559,"user_tz":-300,"elapsed":6,"user":{"displayName":"Александр Шипулин","userId":"03519847593250349314"}},"outputId":"0c1ed2a2-e0e2-42ea-9f90-4fba81291be2"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Количество переменных = 1\n"]}]},{"cell_type":"markdown","source":["Метод SetCoefficient устанавливает коэффициенты x и y в выражении ограничения."],"metadata":{"id":"o7etajblZnKQ"}},{"cell_type":"markdown","source":["Определите целевую функцию."],"metadata":{"id":"vO9TKCV2aIsT"}},{"cell_type":"code","source":["# Create the objective function, 3 * x + y.\n","objective = solver.Objective()\n","objective.SetCoefficient(x_var, 3)\n","objective.SetCoefficient(y_var, 1)\n","objective.SetMaximization()\n","#objective.SetMinimization()"],"metadata":{"id":"s9D_-8rbZmTY","executionInfo":{"status":"ok","timestamp":1736932155815,"user_tz":-300,"elapsed":271,"user":{"displayName":"Александр Шипулин","userId":"03519847593250349314"}}},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":["Метод SetMaximization объявляет это проблемой максимизации."],"metadata":{"id":"Rpzp1oEMaMkh"}},{"cell_type":"markdown","source":["Вызовите решатель и отобразите результаты."],"metadata":{"id":"PbgUxRkaaRrZ"}},{"cell_type":"code","source":["print(f\"Решение с помощью {solver.SolverVersion()}\")\n","result_status = solver.Solve()\n","print(f\"Статус: {result_status}\")\n","if result_status != pywraplp.Solver.OPTIMAL:\n","    print(\"Проблема не имеет оптимального решения!\")\n","    if result_status == pywraplp.Solver.FEASIBLE:\n","        print(\"Было найдено потенциально неоптимальное решение\")\n","    else:\n","        print(\"Решатель не смог решить проблему\")\n","\n","print(\"Solution:\")\n","print(\"Objective value =\", objective.Value())\n","print(\"x =\", x_var.solution_value())\n","print(\"y =\", y_var.solution_value())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bp0pL4LiaRYI","executionInfo":{"status":"ok","timestamp":1736932168136,"user_tz":-300,"elapsed":273,"user":{"displayName":"Александр Шипулин","userId":"03519847593250349314"}},"outputId":"efa4c4ae-6202-4909-d144-004546445eec"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Решение с помощью Glop solver v9.11.4210\n","Статус: 0\n","Solution:\n","Objective value = 4.0\n","x = 1.0\n","y = 1.0\n"]}]},{"cell_type":"markdown","source":["Полная программа"],"metadata":{"id":"DARcKuaHCzrp"}},{"cell_type":"code","source":["# Все в одном файле\n","from ortools.init.python import init\n","from ortools.linear_solver import pywraplp\n","\n","\n","def main():\n","    print(\"Google OR-Tools version:\", init.OrToolsVersion.version_string())\n","\n","    # Create the linear solver with the GLOP backend.\n","    solver = pywraplp.Solver.CreateSolver(\"GLOP\")\n","    if not solver:\n","        print(\"Could not create solver GLOP\")\n","        return\n","\n","    # Create the variables x and y.\n","    x_var = solver.NumVar(0, 1, \"x\")\n","    y_var = solver.NumVar(0, 2, \"y\")\n","\n","    print(\"Number of variables =\", solver.NumVariables())\n","\n","    infinity = solver.infinity()\n","    # Create a linear constraint, x + y <= 2.\n","    constraint = solver.Constraint(-infinity, 2, \"ct\")\n","    constraint.SetCoefficient(x_var, 1)\n","    constraint.SetCoefficient(y_var, 1)\n","\n","    print(\"Number of constraints =\", solver.NumConstraints())\n","\n","    # Create the objective function, 3 * x + y.\n","    objective = solver.Objective()\n","    objective.SetCoefficient(x_var, 3)\n","    objective.SetCoefficient(y_var, 1)\n","    objective.SetMaximization()\n","\n","    print(f\"Solving with {solver.SolverVersion()}\")\n","    result_status = solver.Solve()\n","\n","    print(f\"Status: {result_status}\")\n","    if result_status != pywraplp.Solver.OPTIMAL:\n","        print(\"The problem does not have an optimal solution!\")\n","        if result_status == pywraplp.Solver.FEASIBLE:\n","            print(\"A potentially suboptimal solution was found\")\n","        else:\n","            print(\"The solver could not solve the problem.\")\n","            return\n","\n","    print(\"Solution:\")\n","    print(\"Objective value =\", objective.Value())\n","    print(\"x =\", x_var.solution_value())\n","    print(\"y =\", y_var.solution_value())\n","\n","    print(\"Advanced usage:\")\n","    print(f\"Problem solved in {solver.wall_time():d} milliseconds\")\n","    print(f\"Problem solved in {solver.iterations():d} iterations\")\n","\n","\n","if __name__ == \"__main__\":\n","    init.CppBridge.init_logging(\"basic_example.py\")\n","    cpp_flags = init.CppFlags()\n","    cpp_flags.stderrthreshold = True\n","    cpp_flags.log_prefix = False\n","    init.CppBridge.set_flags(cpp_flags)\n","    main()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":384},"id":"7JZgB1bcCUyd","executionInfo":{"status":"error","timestamp":1733065468526,"user_tz":-300,"elapsed":712,"user":{"displayName":"Александр Шипулин","userId":"03519847593250349314"}},"outputId":"b4c8531d-aec1-4ad3-83e7-e860129f256d"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"No module named 'ortools'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-21931f4dbe9f>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Все в одном файле\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mortools\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0minit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mortools\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinear_solver\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpywraplp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'ortools'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"markdown","source":["## Пример линейной оптимизации 2"],"metadata":{"id":"kMVNHvVzBhsj"}},{"cell_type":"code","source":["from ortools.linear_solver import pywraplp\n","\n","\n","def LinearProgrammingExample():\n","    \"\"\"Linear programming sample.\"\"\"\n","    # Instantiate a Glop solver, naming it LinearExample.\n","    solver = pywraplp.Solver.CreateSolver(\"GLOP\")\n","    if not solver:\n","        return\n","\n","    # Create the two variables and let them take on any non-negative value.\n","    x = solver.NumVar(0, solver.infinity(), \"x\")\n","    y = solver.NumVar(0, solver.infinity(), \"y\")\n","\n","    print(\"Number of variables =\", solver.NumVariables())\n","\n","    # Constraint 0: x + 2y <= 14.\n","    solver.Add(x + 2 * y <= 14.0)\n","\n","    # Constraint 1: 3x - y >= 0.\n","    solver.Add(3 * x - y >= 0.0)\n","\n","    # Constraint 2: x - y <= 2.\n","    solver.Add(x - y <= 2.0)\n","\n","    print(\"Number of constraints =\", solver.NumConstraints())\n","\n","    # Objective function: 3x + 4y.\n","    solver.Maximize(3 * x + 4 * y)\n","\n","    # Solve the system.\n","    print(f\"Solving with {solver.SolverVersion()}\")\n","    status = solver.Solve()\n","\n","    if status == pywraplp.Solver.OPTIMAL:\n","        print(\"Solution:\")\n","        print(f\"Objective value = {solver.Objective().Value():0.1f}\")\n","        print(f\"x = {x.solution_value():0.1f}\")\n","        print(f\"y = {y.solution_value():0.1f}\")\n","    else:\n","        print(\"The problem does not have an optimal solution.\")\n","\n","    print(\"\\nAdvanced usage:\")\n","    print(f\"Problem solved in {solver.wall_time():d} milliseconds\")\n","    print(f\"Problem solved in {solver.iterations():d} iterations\")\n","\n","\n","LinearProgrammingExample()"],"metadata":{"id":"2VvKin6-aQQR"},"execution_count":null,"outputs":[]}]}